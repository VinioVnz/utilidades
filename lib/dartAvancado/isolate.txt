isolates são a forma que o dart lida com concorrencia.
diferente de outras linguagens que usam threads 
compartilhando memória, dart usa isolates, que são unidades
independentes de execução com usa própria memória e event loop

threads são unidades básicos de execução dentro de um 
processo.
elas compartilham o mesmo espaço de memória do processo
principal, o que perite comunicação rápida entre elas, mas
também pode causar condições de corrida (race conditions) e 
outras problemas de concorrencia.

Explicação tecnica
um isolate tem seu proprio heap e stack

stack é usado para armazenar:
 - variaveis locais
 - chamadas de função
 - endereços de retorno

características:
 - estrutura LIFO (last in, first out)
 - alocação e desalocação automática e rápida
 - tamanho limitado
 - vida curta (enquanto a função estiver ativa)

heap é usado para armazenar:
 - objetos complexos
 - instancias que precisam viver mais tempo
 - alocações dinâmicas

características:
 - gerenciada por garbage collector (coletor de lixo)
 - mais lenta que stack
 - tamanho geralmente menor
 - permite alocação dinamica de memoria

a comunicação entre isolates ocorre por meio de mensagens(message passing) e 
não há compartilhamento direto de memória
o isolate principal que roda o UI não deve ser bloqueado com tarefas pesadas
como parsing de JSON gigante ou cálculo matemática pesado.
Para evitar isso, você deve rodar essas tarefas em isolantes secundários,
garantindo uma interface fluida.

Quando usar isolates?
- parsing de arquivos grandes (JSON, XML, CSV)
- calculos matemáticas pesadas.
- processamento de imagem (filtros, compressão)
- manipulação de arquivos grandes(leitura, escrita, compressão, e gravação)
